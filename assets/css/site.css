/* site.js â€” dropdown behavior (desktop hover + touch click), no auto-refresh */

// Helpers
const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));

document.addEventListener('DOMContentLoaded', () => {
  const dropdowns = $$('.navbar .dropdown');
  const closeTimers = new WeakMap();

  // Detect desktop vs touch/pointer
  const mql = window.matchMedia('(hover: hover) and (pointer: fine)');
  let isDesktop = mql.matches;
  if (mql.addEventListener) {
    mql.addEventListener('change', e => { isDesktop = e.matches; closeAll(); });
  } else if (mql.addListener) {
    // Safari <14
    mql.addListener(e => { isDesktop = e.matches; closeAll(); });
  }

  function openDropdown(drop) {
    // close others
    dropdowns.forEach(d => { if (d !== drop) closeDropdown(d, 0); });
    const panel = drop.querySelector('.dropdown-content');
    if (!panel) return;
    clearTimeout(closeTimers.get(drop));
    panel.style.display = 'block';
    drop.classList.add('open');
    drop.setAttribute('aria-expanded', 'true');
  }

  function scheduleClose(drop, delay = 140) {
    clearTimeout(closeTimers.get(drop));
    const t = setTimeout(() => closeDropdown(drop, 0), delay);
    closeTimers.set(drop, t);
  }

  function closeDropdown(drop, delay = 0) {
    clearTimeout(closeTimers.get(drop));
    const panel = drop.querySelector('.dropdown-content');
    if (!panel) return;
    if (delay > 0) return scheduleClose(drop, delay);
    panel.style.display = 'none';
    drop.classList.remove('open');
    drop.setAttribute('aria-expanded', 'false');
  }

  function closeAll() {
    dropdowns.forEach(d => closeDropdown(d, 0));
  }

  // Wire events for each dropdown
  dropdowns.forEach(drop => {
    const trigger = drop.querySelector(':scope > a');
    const panel = drop.querySelector('.dropdown-content');

    // Desktop: open/close on hover with delay, keep open while inside panel
    drop.addEventListener('mouseenter', () => {
      if (!isDesktop) return;
      openDropdown(drop);
    });

    drop.addEventListener('mouseleave', () => {
      if (!isDesktop) return;
      scheduleClose(drop, 140);
    });

    if (panel) {
      panel.addEventListener('mouseenter', () => {
        if (!isDesktop) return;
        clearTimeout(closeTimers.get(drop));
      });
      panel.addEventListener('mouseleave', () => {
        if (!isDesktop) return;
        scheduleClose(drop, 140);
      });
    }

    // Keyboard accessibility: open on focusin, close when focus leaves the whole dropdown
    drop.addEventListener('focusin', () => openDropdown(drop));
    drop.addEventListener('focusout', () => {
      // Defer to allow focus to move within the panel
      setTimeout(() => {
        if (!drop.contains(document.activeElement)) closeDropdown(drop, 0);
      }, 150);
    });

    // Touch/mobile: first tap opens, second tap follows the link
    if (trigger) {
      trigger.addEventListener('click', (e) => {
        if (isDesktop) return; // desktop uses hover + normal navigation
        const isOpen = drop.classList.contains('open') ||
                       (panel && panel.style.display === 'block');
        if (!isOpen) {
          e.preventDefault();   // prevent navigation on first tap
          openDropdown(drop);
        } else {
          // second tap: allow navigation
          closeAll();
        }
      });
    }
  });

  // Click outside to close
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.navbar .dropdown')) closeAll();
  });

  // ESC closes any open menu
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') closeAll();
  });
});

